
# during to work, all containers have internal lan, and have DNS names like their names. So you can to connect to container directly by his DNS name
# So you can connect to php container to port 9000 from another container with "php:9000" (see nginx site config for example) because this container has DNS name "php"
version: "3.5"

services:


  # nginx service configuration. Use "alpine" versions because it has very small volumes
  # WARNING: you can't use apt-get commands in alpine containers, so use it only if you want fully standard functionality
  nginx:
    image: nginx:mainline-alpine
    container_name: ${APPNAME}_nginx
    working_dir: ${SITE_WORKDIR_IN_CONTAINER}
    ports:
    - 80:80
    volumes:
    - ./..:/var/www
    - /mnt/volume-hel1-1:/mnt/volume-hel1-1
    - ./sites-enabled:/etc/nginx/sites-enabled
    - ./nginx_php/config/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - php73
    links:
      - php73
    restart: always

  php73:
    container_name: ${APPNAME}_php
    build:
      context: ./php
    ports:
    - 9000:9000
    working_dir: ${SITE_WORKDIR_IN_CONTAINER}
    volumes:
    - /mnt/volume-hel1-1:/mnt/volume-hel1-1
    - ./..:${SITE_WORKDIR_IN_CONTAINER}
    - ./php/php.ini:/etc/php/fpm/php.ini
    - ./php/php.ini:/usr/local/etc/php/php.ini
    - ./../stellium/current/build/stellium/workers/stage:/etc/supervisor/conf.d/
    links:
    - db
    restart: always

  db:
    image: mysql:${MYSQL_VERSION}
    container_name: ${APPNAME}_mysql
    ports:
    - 3306:3306 #host:container
    volumes:
    - ./database/db_file:/var/lib/mysql
    working_dir: ${SITE_WORKDIR_IN_CONTAINER}
    environment:
    - MYSQL_ROOT_PASSWORD=${SQL_ROOT_PASSWORD}
    - MYSQL_DATABASE=${SQL_DATABASE}
    - MYSQL_USER=${SQL_USER}
    - MYSQL_PASSWORD=${SQL_PASSWORD}
    # command needed for default encoding= utf8
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: always

#  supervisor:
#    container_name: ${APPNAME}_supervisor
#    build:
#      context: ./supervisor
#    working_dir: ${SITE_WORKDIR_IN_CONTAINER}
#    command: supervisord -n -c /var/www/server/supervisor/supervisord.conf
#    volumes:
#    - ./..:/var/www

